variables:
    GIT_SUBMODULE_STRATEGY: recursive


stages:
    - build
    - run
    - example
    - trigger


default:
    tags:
        - fast-dockers
    image: docker.io/aistcpsec/tee-distro-dev:x64-20.04

suit_build:
    stage: build
    script:
        - mkdir suit/build
        - cd suit/build
        - cmake ..
        - make

suit_test:
    stage: run
    script:
        - echo OK

suit_example:
    stage: example
    script:
        - mkdir suit/build
        - cd suit/build
        - cmake ..
        - make
        - ./example/dump ../example/manifests/teep-I-D/ex1.suit
        - ./example/dump ../example/manifests/teep-I-D/ex2.suit
        - ./example/dump ../example/manifests/teep-I-D/ex3.suit
        - ./example/run-install ../example/manifests/teep-I-D/ex1.suit
        - ./example/run-install ../example/manifests/teep-I-D/ex2.suit
        - ./example/run-install ../example/manifests/teep-I-D/ex3.suit

teep_build:
    stage: build
    script:
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - make clean

run_tam_pc:
    stage: run
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - make run-sample-session

run_qemu_tam_keystone:
    stage: run
    image: docker.io/aistcpsec/taref-dev:keystone
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - sudo apt-get install -y e2tools
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - make
        - make run-sample-session | tr -d "\r"

run_qemu_tam_optee:
    stage: run
    image: docker.io/aistcpsec/taref-dev:optee
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - make
        - make run-sample-session | tr -d "\r"

run_tam_sgx:
    stage: run
    image: docker.io/aistcpsec/taref-dev:sgx
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - export MACHINE=SIM
        - make
        - make run-sample-session | tr -d "\r"


### DOXYGEN - START ###
teep_doxygen:
    stage: build
    image: docker.io/aistcpsec/tee-distro-dev:doxygen-20.04
    script:
        - make docs
    artifacts:
        paths:
            - docs/teep-device.pdf
            - docs/teep-device_readme_html.tar.gz
        expire_in: 1 week

### DOXYGEN - START ###

trigger_docker-teep-dev:
    variables:
        TOKEN: 0b8ade51abfe0f4a0bf3d502a5d3b8
    stage: trigger
    tags:
        - shell117
    script:
        - "curl -X POST --fail -F token=${TOKEN} -F ref=main
          https://192.168.100.100/api/v4/projects/133/trigger/pipeline"
