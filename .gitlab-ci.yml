variables:
    GIT_SUBMODULE_STRATEGY: recursive


stages:
    - build
    - exec
#    - example
    - trigger

default:
    tags:
        - fast-dockers
    image: docker.io/aistcpsec/tee-distro-dev:x64-20.04

build_keystone:
    stage: build
    image: docker.io/aistcpsec/taref-dev:keystone
    script:
        - make
        - make clean

build_optee:
    stage: build
    image: docker.io/aistcpsec/taref-dev:optee
    script:
        - make
        - make clean

build_sgx:
    stage: build
    image: docker.io/aistcpsec/taref-dev:sgx
    script:
        - make
        - make clean

build_pc:
    stage: build
    script:
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - make clean

run_tam_pc:
    stage: exec
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - make run-sample-session

run_qemu_tam_keystone:
    stage: exec
    image: docker.io/aistcpsec/taref-dev:keystone
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - sudo apt-get install -y e2tools
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - make
        - make run-sample-session | tr -d "\r"

run_qemu_tam_optee:
    stage: exec
    image: docker.io/aistcpsec/taref-dev:optee
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - make
        - make run-sample-session | tr -d "\r"

run_tam_sgx:
    stage: exec
    image: docker.io/aistcpsec/taref-dev:sgx
    services:
        - name: docker.io/aistcpsec/teep-dev:tamproto
          alias: tamproto
    script:
        - TAMIP=`python3 -c 'import socket;print(socket.gethostbyname("tamproto"))'`
        - export TAM_URL="http://$TAMIP:8888"
        - export MACHINE=SIM
        - make
        - make run-sample-session | tr -d "\r"

suit_test:
    stage: exec
    script:
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - make test

suit_example:
    stage: exec
    script:
        - sudo apt-get install -y libcap-dev
        - export TEE=pc
        - make
        - S=`pwd`/lib/suit
        - cd build/pc/lib/suit
        - ./example/dump $S/example/manifests/teep-I-D/ex1.suit
        - ./example/dump $S/example/manifests/teep-I-D/ex2.suit
        - ./example/dump $S/example/manifests/teep-I-D/ex3.suit
        - ./example/run-install $S/example/manifests/teep-I-D/ex1.suit
        - ./example/run-install $S/example/manifests/teep-I-D/ex2.suit
        - ./example/run-install $S/example/manifests/teep-I-D/ex3.suit


### DOXYGEN - START ###
teep_doxygen:
    stage: build
    image: docker.io/aistcpsec/tee-distro-dev:doxygen-20.04
    script:
        - make docs
    artifacts:
        name: "teep-device-docs"
        paths:
            - docs/teep-device.pdf
            - docs/teep-device_readme_html.tar.gz
        expire_in: 1 week

### DOXYGEN - START ###

trigger_docker-teep-dev:
    variables:
        TOKEN: edd7b7c6ca1ddcc1b762fa9b498edc 
    stage: trigger
    tags:
        - shell117
    script:
        - "curl -X POST --fail -F token=${TOKEN} -F ref=main
          https://192.168.100.100/api/v4/projects/133/trigger/pipeline"
